1.Two Sum
public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        int[] res = new int[2];
        Dictionary<int, int> cnt = new Dictionary<int, int>();
        for(int i = 0; i < nums.Length; i++){
            if( cnt.ContainsKey(target - nums[i]) ){
                res[0] = i;
                res[1] = cnt[target - nums[i]];
                break;
            }
            if(!cnt.ContainsKey(nums[i])) {
                cnt.Add(nums[i], i);
            }
        }
        return res;
    }
}

9. Palindrome Number
public class Solution {
    public bool IsPalindrome(int x) {
        if (x < 0){
            return false;
        }
        int reverse = 0;
        int tmp = x;
        while (tmp != 0){
            reverse = reverse * 10 + tmp % 10;
            tmp = tmp / 10;
        }
        return x == reverse ? true : false;
    }
}
// also can convert x(int) to a string and use two pointer, one from left to right, another from right to left to check this number if is Palindrome or not

217. Contains Duplicate
public class Solution {
    public bool ContainsDuplicate(int[] nums) {
        HashSet<int> set = new HashSet<int>();
        foreach(int num in nums){
            if(set.Contains(num)){
                return true;
            }
            set.Add(num);
        } 
        return false;
    }
}

412.Fizz Buzz
public class Solution {
    public IList<string> FizzBuzz(int n) {
        List<string> res = new List<string>();
        for(int i = 1; i <= n; i++){
            if(i % 15 == 0){
                res.Add("FizzBuzz");
            }else if(i % 3 == 0){
                res.Add("Fizz");
            }else if(i % 5 == 0){
                res.Add("Buzz");
            }else{
                res.Add(i.ToString());
            }
        }
        return res;
    }
}